// Generated by gencpp from file ros_basics_msgs/SimpleVelocities.msg
// DO NOT EDIT!


#ifndef ROS_BASICS_MSGS_MESSAGE_SIMPLEVELOCITIES_H
#define ROS_BASICS_MSGS_MESSAGE_SIMPLEVELOCITIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_basics_msgs
{
template <class ContainerAllocator>
struct SimpleVelocities_
{
  typedef SimpleVelocities_<ContainerAllocator> Type;

  SimpleVelocities_()
    : v(0.0)
    , w(0.0)  {
    }
  SimpleVelocities_(const ContainerAllocator& _alloc)
    : v(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef double _v_type;
  _v_type v;

   typedef double _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleVelocities_

typedef ::ros_basics_msgs::SimpleVelocities_<std::allocator<void> > SimpleVelocities;

typedef boost::shared_ptr< ::ros_basics_msgs::SimpleVelocities > SimpleVelocitiesPtr;
typedef boost::shared_ptr< ::ros_basics_msgs::SimpleVelocities const> SimpleVelocitiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator1> & lhs, const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator2> & rhs)
{
  return lhs.v == rhs.v &&
    lhs.w == rhs.w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator1> & lhs, const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_basics_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e63966e769215a305e1aebe679281346";
  }

  static const char* value(const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe63966e769215a30ULL;
  static const uint64_t static_value2 = 0x5e1aebe679281346ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_basics_msgs/SimpleVelocities";
  }

  static const char* value(const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 v\n"
"float64 w\n"
;
  }

  static const char* value(const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleVelocities_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_basics_msgs::SimpleVelocities_<ContainerAllocator>& v)
  {
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_BASICS_MSGS_MESSAGE_SIMPLEVELOCITIES_H
