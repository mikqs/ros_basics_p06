// Generated by gencpp from file ros_basics_msgs/SimplePose.msg
// DO NOT EDIT!


#ifndef ROS_BASICS_MSGS_MESSAGE_SIMPLEPOSE_H
#define ROS_BASICS_MSGS_MESSAGE_SIMPLEPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <ros_basics_msgs/RPY.h>

namespace ros_basics_msgs
{
template <class ContainerAllocator>
struct SimplePose_
{
  typedef SimplePose_<ContainerAllocator> Type;

  SimplePose_()
    : xyz()
    , rpy()  {
    }
  SimplePose_(const ContainerAllocator& _alloc)
    : xyz(_alloc)
    , rpy(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _xyz_type;
  _xyz_type xyz;

   typedef  ::ros_basics_msgs::RPY_<ContainerAllocator>  _rpy_type;
  _rpy_type rpy;





  typedef boost::shared_ptr< ::ros_basics_msgs::SimplePose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_basics_msgs::SimplePose_<ContainerAllocator> const> ConstPtr;

}; // struct SimplePose_

typedef ::ros_basics_msgs::SimplePose_<std::allocator<void> > SimplePose;

typedef boost::shared_ptr< ::ros_basics_msgs::SimplePose > SimplePosePtr;
typedef boost::shared_ptr< ::ros_basics_msgs::SimplePose const> SimplePoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_basics_msgs::SimplePose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_basics_msgs::SimplePose_<ContainerAllocator1> & lhs, const ::ros_basics_msgs::SimplePose_<ContainerAllocator2> & rhs)
{
  return lhs.xyz == rhs.xyz &&
    lhs.rpy == rhs.rpy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_basics_msgs::SimplePose_<ContainerAllocator1> & lhs, const ::ros_basics_msgs::SimplePose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_basics_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_basics_msgs::SimplePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_basics_msgs::SimplePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_basics_msgs::SimplePose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ca46866baf4abe90def17040f56fbd2";
  }

  static const char* value(const ::ros_basics_msgs::SimplePose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ca46866baf4abe9ULL;
  static const uint64_t static_value2 = 0x0def17040f56fbd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_basics_msgs/SimplePose";
  }

  static const char* value(const ::ros_basics_msgs::SimplePose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point xyz\n"
"ros_basics_msgs/RPY rpy\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: ros_basics_msgs/RPY\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::ros_basics_msgs::SimplePose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xyz);
      stream.next(m.rpy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimplePose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_basics_msgs::SimplePose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_basics_msgs::SimplePose_<ContainerAllocator>& v)
  {
    s << indent << "xyz: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.xyz);
    s << indent << "rpy: ";
    s << std::endl;
    Printer< ::ros_basics_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_BASICS_MSGS_MESSAGE_SIMPLEPOSE_H
